@page "/minesweeper"
@using blazor_games.Minesweeper

<h1>Minesweeper</h1>

<div style="padding-bottom: 1rem">
    <button class="btn btn-secondary" @onclick="() => Start(BoardSize.Small)">Small</button>
    <button class="btn btn-secondary" @onclick="() => Start(BoardSize.Medium)">Medium</button>
    <button class="btn btn-secondary" @onclick="() => Start(BoardSize.Large)">Large</button>
</div>

@if (GetStatus() != GameStatus.NotStarted)
{
    <div style="display: flex; flex-direction: column; align-items: flex-start;">
        @{
            var tiles = Board.Tiles;
            @for (var row = 0; row < tiles.GetLength(0); row++)
            {
                <div class="btn-group">
                    @for (var col = 0; col < tiles.GetLength(1); col++)
                    {
                        var tile = tiles[row, col];
                        @if (tile.GetStatus() == TileStatus.Revealed)
                        {
                            @if (tile.IsMine())
                            {
                                <button class="btn btn-default tile tile-clicked tile-clicked-mine">*</button>
                            }
                            else
                            {
                                <button class="btn btn-default tile tile-clicked tile-clicked-empty">@ParseNumMines(tile)</button>
                            }
                        }
                        else if (tile.GetStatus() == TileStatus.Flagged)
                        {
                            <button class="btn btn-default tile tile-flagged" oncontextmenu="return false;" @onclick="() => HandleLeftClick(tile)" @onmouseup="@(e => HandleRightClick(e, tile))">&#x2690;</button>
                        }
                        else
                        {
                            <button class="btn btn-default tile tile-unclicked" oncontextmenu="return false;" @onclick="() => HandleLeftClick(tile)" @onmouseup="@(e => HandleRightClick(e, tile))"></button>
                        }
                    }
                </div>
            }
        }
    </div>

    @if (GetStatus() == GameStatus.Lost)
    {
        <div style="padding-bottom: 1rem">
            <h1>You lost :(</h1>
        </div>
    }
    else if (GetStatus() == GameStatus.Won)
    {
        <div style="padding-bottom: 1rem">
            <h1>You Won!</h1>
        </div>
    }
}


@code {
    private Game Game { get; set; }
    private Board Board { get; set; }

    private void Start(BoardSize boardSize)
    {
        Game = new Game(boardSize);
        Board = Game.Board;
    }

    private GameStatus GetStatus()
    {
        return Game?.Status ?? GameStatus.NotStarted;
    }

    private void HandleLeftClick(Tile tile)
    {
        Game.LeftClickTile(tile);
    }

    private void HandleRightClick(MouseEventArgs e, Tile tile)
    {
        if (e.Button == 2)
        {
            // Right mouse button was clicked.
            Game.RightClickTile(tile);
        }
    }

    private string ParseNumMines(Tile tile)
    {
        var neighbouringMines = Board.CountNeighbouringMines(tile);
        return neighbouringMines == 0 ? "" : neighbouringMines.ToString();
    }

}